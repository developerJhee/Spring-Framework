BOARD.txt

CREATE TABLE `springdb`.`tbl_board` (
  `bno` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(200) NOT NULL,
  `content` TEXT NULL,
  `writer` VARCHAR(45) NOT NULL,
  `regdate` TIMESTAMP NOT NULL DEFAULT now(),
  `viewcnt` INT NULL DEFAULT 0,
  PRIMARY KEY (`bno`));
  
  
  
  <!-- 한글처리 필터 설정 -->
	<filter>
	   <filter-name>encoding</filter-name>
	   <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	    	<param-name>encoding</param-name>
	    	<param-value>UTF-8</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
	  <filter-name>encoding</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 한글처리 필터 설정 -->
	
	
	
	
	https://adminlte.io/themes/AdminLTE/index2.html
	
	
	* 의존 객체 주입
	
	@Inject
		=> Java에서 지원하는 어노테이션(특정 프레임워크에 종속적이지 않다.)
	
		해당 객체를 찾는 순서
		[ 타입 -> @Qualifier -> 이름 -> 실패]
	
		* @Autowired 동일한 동작 수행(찾는 순서가 다름)
		* 빌드도구(Maven/Gradle) 라이브러디 추가 필요
		
		* 사용가능 위치 : 멤버변수, setter(), 생성자, 일반메서드
		
	---------------------------------------------------------------------------
	@Autowired
		=> Spring에서 지원하는 어노테이션
		
		해당 객체를 찾는 순서
		[ 타입 -> 이름 -> @Qualifier -> 실패]	
			
		* <context:annotaion-config /> 설정값 필요 (스프링 기본 설정값)
		
		* 사용가능 위치 : 멤버변수, setter(), 생성자, 일반메서드
		
	---------------------------------------------------------------------------	
	@Resource
		=> Java에서 지원하는 어노테이션(특정 프레임워크에 종속적이지 않다.)	
		
		해당 객체를 찾는 순서
		[ 이름 -> 타입 -> @Qualifier -> 실패]	
			
		* <context:annotaion-config /> 설정값 필요 (스프링 기본 설정값)
		
		* 사용가능 위치 : 멤버변수, setter()
		
		
	---------------------------------------------------------------------------	
	@Qualifier
	
	* 타입이 동일한 객체(bean)가 여러개 있는 경우 => 스프링 컨테이너 초기화 => Exception
	  (@Autowired 동일한 타입에 여러곳 사용)
	  	
	* 문제 상황을 해결하기 위해서 객체의 이름을 지정
		<context:annotaion-config>
			<bean id="객체명" class="객체 주소">
				<qualifier value="dao1" />
			</bean>
		</context:annotaion-config>  	
	  	
	  	
		@Inject @Qualifier("Bdao") // 흔히 말하면 구분하기위해 별명을 지어주는거다.
		private BoardDAO dao;	
		=> inject옆에 바로 적어준다.
		
		
		
		
	<컨트롤러를 어떻게 구분할 건지? 페이지 어떻게 구분할건지?>
	요구사항에 대해 어떻게 처리할지 공통주소와 각 기능별로 URI를 어떻게 구분할지 확인한다.
	* 공통주소 URI 구분
	* 각 기능별 URI를 체크	
	* 각 URI별 호출방식(GET/POST)
	* 결과/페이지 출력
	* 예외처리
	* 서비스계층
	* DAO - SQL 준비
	
	
